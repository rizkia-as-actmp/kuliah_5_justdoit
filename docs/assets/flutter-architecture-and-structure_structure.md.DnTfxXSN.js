import{_ as n,c as e,a2 as t,o as r}from"./chunks/framework.CHKAMmNZ.js";const k=JSON.parse('{"title":"Struktur Project dengan Feature-first 📁","description":"","frontmatter":{},"headers":[],"relativePath":"flutter-architecture-and-structure/structure.md","filePath":"flutter-architecture-and-structure/structure.md"}'),s={name:"flutter-architecture-and-structure/structure.md"};function i(u,a,o,l,p,d){return r(),e("div",null,a[0]||(a[0]=[t(`<h1 id="struktur-project-dengan-feature-first" tabindex="-1">Struktur Project dengan Feature-first 📁 <a class="header-anchor" href="#struktur-project-dengan-feature-first" aria-label="Permalink to &quot;Struktur Project dengan Feature-first :file_folder:&quot;">​</a></h1><hr><p>Setelah menentukan arsitektur aplikasi untuk project ini, langkah berikutnya adalah menyusun struktur kode. Proses ini penting untuk memastikan kode mudah dipahami, dikelola, dan dikembangkan. Selain membahas arsitektur aplikasi, <strong>Andrea Bizzotto</strong> juga menjelaskan pendekatan <strong>Feature-first</strong> untuk menyusun project Flutter.</p><br><h2 id="apa-itu-feature-first" tabindex="-1"><strong>Apa itu Feature-first?</strong> 🎯 <a class="header-anchor" href="#apa-itu-feature-first" aria-label="Permalink to &quot;**Apa itu Feature-first?** :dart:&quot;">​</a></h2><p>Pendekatan <strong>Feature-first</strong> adalah cara menyusun kode dengan membuat folder terpisah untuk setiap fitur dalam aplikasi. Setiap folder fitur dapat memiliki sub-folder untuk memisahkan berbagai layer dalam arsitektur aplikasi (presentation, application, domain, data, dll).</p><br><h2 id="mengapa-memilih-feature-first" tabindex="-1"><strong>Mengapa Memilih Feature-first?</strong> 🤔 <a class="header-anchor" href="#mengapa-memilih-feature-first" aria-label="Permalink to &quot;**Mengapa Memilih Feature-first?** :thinking:&quot;">​</a></h2><p>Arsitektur aplikasi sangat memengaruhi keputusan dalam menentukan struktur project. Karena saya menggunakan <strong>Riverpod Architecture</strong>, maka pendekatan Feature-first adalah pilihan yang tepat.</p><p>Pendekatan ini memberikan keuntungan seperti:</p><ul><li><strong>Pengelompokan Kode yang Jelas</strong>: Kode dikelompokkan berdasarkan fitur, sehingga memudahkan navigasi dan pengembangan.</li><li><strong>Skalabilitas</strong>: Penambahan fitur baru ataupun penghapusan fitur menjadi lebih mudah tanpa merusak struktur yang ada.</li><li><strong>Pemeliharaan yang Efisien</strong>: Perubahan pada fitur tidak akan memengaruhi fitur lain, karena setiap fitur terisolasi dalam folder masing-masing.</li></ul><br><h2 id="pemisahan-shared-code" tabindex="-1"><strong>Pemisahan Shared Code</strong> ♻️ <a class="header-anchor" href="#pemisahan-shared-code" aria-label="Permalink to &quot;**Pemisahan Shared Code** :recycle:&quot;">​</a></h2><p>Kode yang digunakan bersama oleh berbagai fitur, seperti <strong>widgets</strong>, <strong>constants</strong>, atau <strong>utils</strong>, dipisahkan dari folder fitur dan ditempatkan dalam folder khusus. Hal ini memastikan shared code dapat diakses tanpa menimbulkan ketergantungan antar fitur.</p><br><h2 id="apa-itu-feature" tabindex="-1"><strong>Apa Itu Feature?</strong> 💡 <a class="header-anchor" href="#apa-itu-feature" aria-label="Permalink to &quot;**Apa Itu Feature?** :bulb:&quot;">​</a></h2><p>Feature adalah tentang apa yang <strong>dilakukan pengguna</strong>, bukan apa yang <strong>dilihat pengguna</strong>.</p><p>Contohnya:</p><ul><li><strong>Login</strong> dan <strong>Register</strong> bukan dua fitur berbeda, tetapi merupakan bagian dari satu fitur, yaitu <strong>Authentication</strong>.</li><li>Sebuah fitur adalah kebutuhan fungsional (functional requirement) yang membantu pengguna menyelesaikan tugas tertentu.</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><strong>“A feature is a functional requirement that helps the user complete a given task.”</strong> ~ Andrea Bizzotto</p></div><br><h2 id="cara-menerapkan-feature-first" tabindex="-1"><strong>Cara Menerapkan Feature-first</strong> 🚀 <a class="header-anchor" href="#cara-menerapkan-feature-first" aria-label="Permalink to &quot;**Cara Menerapkan Feature-first** :rocket:&quot;">​</a></h2><p>Berikut adalah langkah-langkah untuk menyusun kode dengan pendekatan Feature-first:</p><ol><li><strong>Mulai dari Domain Layer</strong>: Identifikasi domain model yang diperlukan untuk fitur tersebut.</li><li><strong>Identifikasi Business Logic</strong>: Tentukan business logic yang dibutuhkan untuk memanipulasi domain model.</li><li><strong>Kelompokkan Model</strong>: Model-model yang saling berkaitan dikelompokkan ke dalam satu folder.</li><li><strong>Buat Sub-folder</strong>: Di dalam folder fitur, buat sub-folder untuk memisahkan layer seperti <strong>Presentation</strong>, <strong>Application</strong>, <strong>Domain</strong>, dan <strong>Data</strong>. Setiap sub-folder ini berisi kode yang saling terkait untuk meng-handle domain model.</li></ol><h2 id="contoh-struktur-project" tabindex="-1">Contoh Struktur Project <a class="header-anchor" href="#contoh-struktur-project" aria-label="Permalink to &quot;Contoh Struktur Project&quot;">​</a></h2><p>Berikut adalah contoh struktur kode berdasarkan pendekatan Feature-first:</p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>|____src</span></span>
<span class="line"><span>| |____interfaces</span></span>
<span class="line"><span>| |____common_widgets</span></span>
<span class="line"><span>| |____features</span></span>
<span class="line"><span>| | |____mark</span></span>
<span class="line"><span>| | | |____data</span></span>
<span class="line"><span>| | | |____domain</span></span>
<span class="line"><span>| | | |____application</span></span>
<span class="line"><span>| | | |____presentation</span></span>
<span class="line"><span>| | |____authentication</span></span>
<span class="line"><span>| | | |____data</span></span>
<span class="line"><span>| | | |____domain</span></span>
<span class="line"><span>| | | |____application</span></span>
<span class="line"><span>| | | |____presentation</span></span>
<span class="line"><span>| |____utils</span></span>
<span class="line"><span>| |____infrastructure</span></span>
<span class="line"><span>| |____exceptions</span></span>
<span class="line"><span>| |____constants</span></span>
<span class="line"><span>|____main.dart</span></span></code></pre></div><br><h2 id="referensi" tabindex="-1">Referensi 📚 <a class="header-anchor" href="#referensi" aria-label="Permalink to &quot;Referensi :books:&quot;">​</a></h2><ul><li><a href="https://codewithandrea.com/articles/flutter-project-structure/" target="_blank" rel="noreferrer">Flutter Project Structure: Feature-first or Layer-first?</a></li></ul>`,30)]))}const c=n(s,[["render",i]]);export{k as __pageData,c as default};
