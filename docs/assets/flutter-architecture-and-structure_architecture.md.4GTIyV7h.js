import{_ as e,c as t,a2 as r,o as i}from"./chunks/framework.CHKAMmNZ.js";const g=JSON.parse('{"title":"Arsitektur Project 🏗️","description":"","frontmatter":{},"headers":[],"relativePath":"flutter-architecture-and-structure/architecture.md","filePath":"flutter-architecture-and-structure/architecture.md"}'),n={name:"flutter-architecture-and-structure/architecture.md"};function o(s,a,u,l,d,c){return i(),t("div",null,a[0]||(a[0]=[r('<h1 id="arsitektur-project" tabindex="-1">Arsitektur Project 🏗️ <a class="header-anchor" href="#arsitektur-project" aria-label="Permalink to &quot;Arsitektur Project :building_construction:&quot;">​</a></h1><hr><p>Sebelum membuat kode pada project eksplorasi kali ini, saya menentukan dan mempelajari terlebih dahulu mengenai arsitektur yang akan saya gunakan. Berikut penjelasan dan alasan memilih arsitektur ini:</p><br><h2 id="mengapa-memilih-arsitektur" tabindex="-1"><strong>Mengapa Memilih Arsitektur ?</strong> 🤔 <a class="header-anchor" href="#mengapa-memilih-arsitektur" aria-label="Permalink to &quot;**Mengapa Memilih Arsitektur ?** :thinking:&quot;">​</a></h2><p>Alasan utama untuk memilih arsitektur yang baik adalah:</p><ul><li>Jika terlalu sederhana, kode akan sulit dipahami dan di-maintenance karena kurangnya pemisahan fungsi dalam kode.</li><li>Jika terlalu rumit, kode menjadi verbose, sehingga menambahkan fitur baru, bahkan fitur kecil, terasa sulit.</li></ul><br><h2 id="riverpod-architecture" tabindex="-1"><strong>Riverpod Architecture</strong> 🌱 <a class="header-anchor" href="#riverpod-architecture" aria-label="Permalink to &quot;**Riverpod Architecture** :seedling:&quot;">​</a></h2><p>Arsitektur ini diperkenalkan oleh Andrea Bizzotto, seorang Google Developer Expert untuk Dart &amp; Flutter. Andrea menyebut arsitektur ini sebagai <strong>Riverpod Architecture</strong>. Namun, perlu diingat bahwa ini bukan arsitektur Official langsung dari Riverpod.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For lack of a better name, I&#39;ll call this Riverpod Architecture - though keep in mind that this is just my take on it and not an &quot;official&quot; architecture endorsed by Remi Rousselet (the author of Riverpod). ~ Andrea Bizzotto</p></div><p>Arsitektur ini terdiri atas empat bagian utama:</p><ol><li><strong>Data</strong></li><li><strong>Domain</strong></li><li><strong>Application</strong></li><li><strong>Presentation</strong></li></ol><p>Setiap bagian memiliki tanggung jawab dan fungsinya masing-masing. Bagian-bagian ini tetap saling berkomunikasi. Penjelasan detail untuk masing-masing bagian akan saya jelaskan di halaman berikutnya.</p><br><h2 id="manfaat-menggunakan-riverpod-architecture" tabindex="-1"><strong>Manfaat Menggunakan Riverpod Architecture</strong> ⭐ <a class="header-anchor" href="#manfaat-menggunakan-riverpod-architecture" aria-label="Permalink to &quot;**Manfaat Menggunakan Riverpod Architecture** :star:&quot;">​</a></h2><p>Menurut Andrea, berikut adalah manfaat dari arsitektur ini:</p><ul><li><strong>Separation of Concerns:</strong> Memisahkan kode UI, business logic, dan cara mengakses data.</li><li><strong>Kemudahan Fetching dan Caching Data:</strong> Memastikan data selalu up-to-date tanpa membuat kode menjadi rumit.</li><li><strong>Pengelolaan State yang Efisien:</strong> Memungkinkan perubahan data sambil memperbarui state (loading, error, data) pada UI yang bergantung pada data tersebut.</li><li><strong>Mudah Diuji:</strong> Memudahkan penulisan unit test dan integration test untuk berbagai komponen aplikasi.</li></ul><br><br><h2 id="referensi" tabindex="-1">Referensi 📚 <a class="header-anchor" href="#referensi" aria-label="Permalink to &quot;Referensi :books:&quot;">​</a></h2><ul><li><a href="https://codewithandrea.com/articles/flutter-app-architecture-riverpod-introduction/" target="_blank" rel="noreferrer">Andrea Bizzotto: Riverpod Architecture</a></li></ul>',22)]))}const m=e(n,[["render",o]]);export{g as __pageData,m as default};
