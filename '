import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:justdoit/src/common_widgets/custom_sized_box.dart';
import 'package:markdown_editor_plus/markdown_editor_plus.dart';
import 'package:justdoit/src/common_widgets/show_excep_dialog.dart';
import 'package:justdoit/src/common_widgets/type.dart';
import 'package:justdoit/src/features/authentication/presentation/login/login_controller.dart';

class MarkdownEditorScreen extends StatelessWidget {
  const MarkdownEditorScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          HeadingTwo(data: "Login"),
          extraBigVSizedBox,
          const _MarkdownEditor(),
        ],
      ),
    );
  }
}

class _MarkdownEditor extends ConsumerStatefulWidget {
  const _MarkdownEditor({super.key});
  @override
  ConsumerState<ConsumerStatefulWidget> createState() => _MarkdownEditorState();
}

class _MarkdownEditorState extends ConsumerState<_MarkdownEditor> {
  final _formKey = GlobalKey<FormState>();
  late FocusScopeNode _focusNode;

  @override
  void initState() {
    super.initState();
    _focusNode = FocusScopeNode();
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _focusNode.dispose();
    super.dispose();
  }

  final _emailController = TextEditingController();
  String get email => _emailController.text;

  final _passwordController = TextEditingController();
  String get password => _passwordController.text;

  void _onSubmit() async {
    if (_formKey.currentState!.validate()) {
      final controller = ref.read(loginControllerProvider.notifier);
      final isSuccess =
          await controller.submit(email: email, password: password);

      if (isSuccess) {
        Navigator.pushReplacementNamed(context, '/verify-otp');
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // state disini digunakan hanya untuk membaca state pada loginControllerProvider
    final state = ref.watch(loginControllerProvider);

    if (state is AsyncError) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        showExceptionDialog(context, state.error);
      });
    }

    return Expanded(
      child: SingleChildScrollView(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.spaceEvenly,
          children: [
// editable text with toolbar by default
            MarkdownAutoPreview(
              emojiConvert: true,
            ),
            // SplittedMarkdownFormField(
            //   markdownSyntax: '## Headline',
            //   decoration: InputDecoration(
            //     hintText: 'Splitted Markdown FormField',
            //   ),
            //   emojiConvert: true,
            // ),
          ],
        ),
      ),
    );
  }
}
